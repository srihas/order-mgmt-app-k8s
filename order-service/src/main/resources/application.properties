spring.application.name=order-service

server.port=9300

spring.boot.admin.client.url=http://localhost:9999
spring.boot.admin.client.period=3000ms

# ===============================
# = DATA SOURCE
# ===============================
# Set here configurations for the database connection
spring.datasource.url=jdbc:postgresql://${RDS_HOSTNAME:postgres}:${RDS_PORT:5432}/${RDS_DATABASE:postgresdb}
spring.datasource.username=${RDS_USERNAME:postgresadmin}
spring.datasource.password=${RDS_PASSWORD:admin123}
spring.datasource.driver-class-name=org.postgresql.Driver
# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1
# ===============================
# = JPA / HIBERNATE
# ===============================
# Show or not log for each sql query
spring.jpa.show-sql=true
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
spring.jpa.hibernate.ddl-auto=create

# Naming strategy
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
spring.jpa.hibernate.naming.physical-strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.datasource.hikari.maximum-pool-size=2

queue.name=messagequeue
fanout.exchange=messagequeue-exchange
spring.rabbitmq.host: ${MB_HOSTNAME:rabbitmq}
spring.rabbitmq.port: ${MB_PORT:5672}
spring.rabbitmq.username: ${MB_USERNAME:guest}
spring.rabbitmq.password: ${MB_PASSWORD:guest}